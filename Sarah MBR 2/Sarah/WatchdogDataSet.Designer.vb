'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4952
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("WatchdogDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class WatchdogDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableEvent_Current_State As Event_Current_StateDataTable
    
    Private tableTemp_Current_State As Temp_Current_StateDataTable
    
    Private tableEvent_History As Event_HistoryDataTable
    
    Private tableX10_Control As X10_ControlDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Event_Current_State")) Is Nothing) Then
                MyBase.Tables.Add(New Event_Current_StateDataTable(ds.Tables("Event_Current_State")))
            End If
            If (Not (ds.Tables("Temp_Current_State")) Is Nothing) Then
                MyBase.Tables.Add(New Temp_Current_StateDataTable(ds.Tables("Temp_Current_State")))
            End If
            If (Not (ds.Tables("Event_History")) Is Nothing) Then
                MyBase.Tables.Add(New Event_HistoryDataTable(ds.Tables("Event_History")))
            End If
            If (Not (ds.Tables("X10_Control")) Is Nothing) Then
                MyBase.Tables.Add(New X10_ControlDataTable(ds.Tables("X10_Control")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Event_Current_State() As Event_Current_StateDataTable
        Get
            Return Me.tableEvent_Current_State
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Temp_Current_State() As Temp_Current_StateDataTable
        Get
            Return Me.tableTemp_Current_State
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Event_History() As Event_HistoryDataTable
        Get
            Return Me.tableEvent_History
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property X10_Control() As X10_ControlDataTable
        Get
            Return Me.tableX10_Control
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As WatchdogDataSet = CType(MyBase.Clone,WatchdogDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Event_Current_State")) Is Nothing) Then
                MyBase.Tables.Add(New Event_Current_StateDataTable(ds.Tables("Event_Current_State")))
            End If
            If (Not (ds.Tables("Temp_Current_State")) Is Nothing) Then
                MyBase.Tables.Add(New Temp_Current_StateDataTable(ds.Tables("Temp_Current_State")))
            End If
            If (Not (ds.Tables("Event_History")) Is Nothing) Then
                MyBase.Tables.Add(New Event_HistoryDataTable(ds.Tables("Event_History")))
            End If
            If (Not (ds.Tables("X10_Control")) Is Nothing) Then
                MyBase.Tables.Add(New X10_ControlDataTable(ds.Tables("X10_Control")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableEvent_Current_State = CType(MyBase.Tables("Event_Current_State"),Event_Current_StateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEvent_Current_State) Is Nothing) Then
                Me.tableEvent_Current_State.InitVars
            End If
        End If
        Me.tableTemp_Current_State = CType(MyBase.Tables("Temp_Current_State"),Temp_Current_StateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTemp_Current_State) Is Nothing) Then
                Me.tableTemp_Current_State.InitVars
            End If
        End If
        Me.tableEvent_History = CType(MyBase.Tables("Event_History"),Event_HistoryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEvent_History) Is Nothing) Then
                Me.tableEvent_History.InitVars
            End If
        End If
        Me.tableX10_Control = CType(MyBase.Tables("X10_Control"),X10_ControlDataTable)
        If (initTable = true) Then
            If (Not (Me.tableX10_Control) Is Nothing) Then
                Me.tableX10_Control.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "WatchdogDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/WatchdogDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableEvent_Current_State = New Event_Current_StateDataTable
        MyBase.Tables.Add(Me.tableEvent_Current_State)
        Me.tableTemp_Current_State = New Temp_Current_StateDataTable
        MyBase.Tables.Add(Me.tableTemp_Current_State)
        Me.tableEvent_History = New Event_HistoryDataTable
        MyBase.Tables.Add(Me.tableEvent_History)
        Me.tableX10_Control = New X10_ControlDataTable
        MyBase.Tables.Add(Me.tableX10_Control)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEvent_Current_State() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTemp_Current_State() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEvent_History() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeX10_Control() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As WatchdogDataSet = New WatchdogDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Event_Current_StateRowChangeEventHandler(ByVal sender As Object, ByVal e As Event_Current_StateRowChangeEvent)
    
    Public Delegate Sub Temp_Current_StateRowChangeEventHandler(ByVal sender As Object, ByVal e As Temp_Current_StateRowChangeEvent)
    
    Public Delegate Sub Event_HistoryRowChangeEventHandler(ByVal sender As Object, ByVal e As Event_HistoryRowChangeEvent)
    
    Public Delegate Sub X10_ControlRowChangeEventHandler(ByVal sender As Object, ByVal e As X10_ControlRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Event_Current_StateDataTable
        Inherits Global.System.Data.TypedTableBase(Of Event_Current_StateRow)
        
        Private columnRow_ID As Global.System.Data.DataColumn
        
        Private columnLast_Update As Global.System.Data.DataColumn
        
        Private columnGarage_Door As Global.System.Data.DataColumn
        
        Private columnGarage_Window_South As Global.System.Data.DataColumn
        
        Private columnGarage_Window_North As Global.System.Data.DataColumn
        
        Private columnGarage_Outside_Door As Global.System.Data.DataColumn
        
        Private columnGarage_Outside_Door_Lock As Global.System.Data.DataColumn
        
        Private columnGarage_Inside_Door As Global.System.Data.DataColumn
        
        Private columnGarage_Inside_Door_Lock As Global.System.Data.DataColumn
        
        Private columnKitchen_Window As Global.System.Data.DataColumn
        
        Private columnBack_Door As Global.System.Data.DataColumn
        
        Private columnBack_Door_Lock As Global.System.Data.DataColumn
        
        Private columnGreat_Room_Window_South As Global.System.Data.DataColumn
        
        Private columnGreat_Room_Window_North As Global.System.Data.DataColumn
        
        Private columnPlay_Room_Window_South As Global.System.Data.DataColumn
        
        Private columnPlay_Room_window_North As Global.System.Data.DataColumn
        
        Private columnFamiy_Room_Window_South As Global.System.Data.DataColumn
        
        Private columnFamily_Room_Window_Front_South As Global.System.Data.DataColumn
        
        Private columnFamily_Room_Window_Front_Middle As Global.System.Data.DataColumn
        
        Private columnFamily_Room_Window_Front_North As Global.System.Data.DataColumn
        
        Private columnFront_Door As Global.System.Data.DataColumn
        
        Private columnFront_Door_Lock As Global.System.Data.DataColumn
        
        Private columnDining_Room_Window_South As Global.System.Data.DataColumn
        
        Private columnDining_Room_Window_North As Global.System.Data.DataColumn
        
        Private columnMaster_Bath_Window As Global.System.Data.DataColumn
        
        Private columnMaster_Bedroom_Window_South As Global.System.Data.DataColumn
        
        Private columnMaster_Bedroom_Window_Back_South As Global.System.Data.DataColumn
        
        Private columnMaster_Bedroom_Window_Back_North As Global.System.Data.DataColumn
        
        Private columnSydney_Bedroom_Window As Global.System.Data.DataColumn
        
        Private columnEthan_Bedroom_Window As Global.System.Data.DataColumn
        
        Private columnSpare_Bedroom_Window_North As Global.System.Data.DataColumn
        
        Private columnSpare_Bedroom_Window_South As Global.System.Data.DataColumn
        
        Private columnMailbox As Global.System.Data.DataColumn
        
        Private columnBasement_Door As Global.System.Data.DataColumn
        
        Private columnBasement_Door_Lock As Global.System.Data.DataColumn
        
        Private columnBasement_Window_South As Global.System.Data.DataColumn
        
        Private columnBasement_Window_North As Global.System.Data.DataColumn
        
        Private columnBasement_Storage_Door As Global.System.Data.DataColumn
        
        Private columnCar_West As Global.System.Data.DataColumn
        
        Private columnCar_East As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Event_Current_State"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRow_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Last_UpdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLast_Update
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Garage_DoorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarage_Door
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Garage_Window_SouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarage_Window_South
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Garage_Window_NorthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarage_Window_North
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Garage_Outside_DoorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarage_Outside_Door
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Garage_Outside_Door_LockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarage_Outside_Door_Lock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Garage_Inside_DoorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarage_Inside_Door
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Garage_Inside_Door_LockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarage_Inside_Door_Lock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Kitchen_WindowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKitchen_Window
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Back_DoorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBack_Door
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Back_Door_LockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBack_Door_Lock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Great_Room_Window_SouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGreat_Room_Window_South
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Great_Room_Window_NorthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGreat_Room_Window_North
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Play_Room_Window_SouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlay_Room_Window_South
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Play_Room_window_NorthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlay_Room_window_North
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Famiy_Room_Window_SouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamiy_Room_Window_South
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Family_Room_Window_Front_SouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamily_Room_Window_Front_South
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Family_Room_Window_Front_MiddleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamily_Room_Window_Front_Middle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Family_Room_Window_Front_NorthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFamily_Room_Window_Front_North
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Front_DoorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFront_Door
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Front_Door_LockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFront_Door_Lock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dining_Room_Window_SouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDining_Room_Window_South
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dining_Room_Window_NorthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDining_Room_Window_North
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Master_Bath_WindowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaster_Bath_Window
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Master_Bedroom_Window_SouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaster_Bedroom_Window_South
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Master_Bedroom_Window_Back_SouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaster_Bedroom_Window_Back_South
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Master_Bedroom_Window_Back_NorthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaster_Bedroom_Window_Back_North
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sydney_Bedroom_WindowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSydney_Bedroom_Window
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ethan_Bedroom_WindowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEthan_Bedroom_Window
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Spare_Bedroom_Window_NorthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpare_Bedroom_Window_North
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Spare_Bedroom_Window_SouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpare_Bedroom_Window_South
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MailboxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMailbox
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Basement_DoorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasement_Door
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Basement_Door_LockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasement_Door_Lock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Basement_Window_SouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasement_Window_South
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Basement_Window_NorthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasement_Window_North
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Basement_Storage_DoorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasement_Storage_Door
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Car_WestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCar_West
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Car_EastColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCar_East
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Event_Current_StateRow
            Get
                Return CType(Me.Rows(index),Event_Current_StateRow)
            End Get
        End Property
        
        Public Event Event_Current_StateRowChanging As Event_Current_StateRowChangeEventHandler
        
        Public Event Event_Current_StateRowChanged As Event_Current_StateRowChangeEventHandler
        
        Public Event Event_Current_StateRowDeleting As Event_Current_StateRowChangeEventHandler
        
        Public Event Event_Current_StateRowDeleted As Event_Current_StateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEvent_Current_StateRow(ByVal row As Event_Current_StateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEvent_Current_StateRow( _
                    ByVal Row_ID As Integer,  _
                    ByVal Last_Update As Date,  _
                    ByVal Garage_Door As Integer,  _
                    ByVal Garage_Window_South As Integer,  _
                    ByVal Garage_Window_North As Integer,  _
                    ByVal Garage_Outside_Door As Integer,  _
                    ByVal Garage_Outside_Door_Lock As Integer,  _
                    ByVal Garage_Inside_Door As Integer,  _
                    ByVal Garage_Inside_Door_Lock As Integer,  _
                    ByVal Kitchen_Window As Integer,  _
                    ByVal Back_Door As Integer,  _
                    ByVal Back_Door_Lock As Integer,  _
                    ByVal Great_Room_Window_South As Integer,  _
                    ByVal Great_Room_Window_North As Integer,  _
                    ByVal Play_Room_Window_South As Integer,  _
                    ByVal Play_Room_window_North As Integer,  _
                    ByVal Famiy_Room_Window_South As Integer,  _
                    ByVal Family_Room_Window_Front_South As Integer,  _
                    ByVal Family_Room_Window_Front_Middle As Integer,  _
                    ByVal Family_Room_Window_Front_North As Integer,  _
                    ByVal Front_Door As Integer,  _
                    ByVal Front_Door_Lock As Integer,  _
                    ByVal Dining_Room_Window_South As Integer,  _
                    ByVal Dining_Room_Window_North As Integer,  _
                    ByVal Master_Bath_Window As Integer,  _
                    ByVal Master_Bedroom_Window_South As Integer,  _
                    ByVal Master_Bedroom_Window_Back_South As Integer,  _
                    ByVal Master_Bedroom_Window_Back_North As Integer,  _
                    ByVal Sydney_Bedroom_Window As Integer,  _
                    ByVal Ethan_Bedroom_Window As Integer,  _
                    ByVal Spare_Bedroom_Window_North As Integer,  _
                    ByVal Spare_Bedroom_Window_South As Integer,  _
                    ByVal Mailbox As Integer,  _
                    ByVal Basement_Door As Integer,  _
                    ByVal Basement_Door_Lock As Integer,  _
                    ByVal Basement_Window_South As Integer,  _
                    ByVal Basement_Window_North As Integer,  _
                    ByVal Basement_Storage_Door As Integer,  _
                    ByVal Car_West As Integer,  _
                    ByVal Car_East As Integer) As Event_Current_StateRow
            Dim rowEvent_Current_StateRow As Event_Current_StateRow = CType(Me.NewRow,Event_Current_StateRow)
            Dim columnValuesArray() As Object = New Object() {Row_ID, Last_Update, Garage_Door, Garage_Window_South, Garage_Window_North, Garage_Outside_Door, Garage_Outside_Door_Lock, Garage_Inside_Door, Garage_Inside_Door_Lock, Kitchen_Window, Back_Door, Back_Door_Lock, Great_Room_Window_South, Great_Room_Window_North, Play_Room_Window_South, Play_Room_window_North, Famiy_Room_Window_South, Family_Room_Window_Front_South, Family_Room_Window_Front_Middle, Family_Room_Window_Front_North, Front_Door, Front_Door_Lock, Dining_Room_Window_South, Dining_Room_Window_North, Master_Bath_Window, Master_Bedroom_Window_South, Master_Bedroom_Window_Back_South, Master_Bedroom_Window_Back_North, Sydney_Bedroom_Window, Ethan_Bedroom_Window, Spare_Bedroom_Window_North, Spare_Bedroom_Window_South, Mailbox, Basement_Door, Basement_Door_Lock, Basement_Window_South, Basement_Window_North, Basement_Storage_Door, Car_West, Car_East}
            rowEvent_Current_StateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEvent_Current_StateRow)
            Return rowEvent_Current_StateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLast_Update(ByVal Last_Update As Date) As Event_Current_StateRow
            Return CType(Me.Rows.Find(New Object() {Last_Update}),Event_Current_StateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Event_Current_StateDataTable = CType(MyBase.Clone,Event_Current_StateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Event_Current_StateDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRow_ID = MyBase.Columns("Row_ID")
            Me.columnLast_Update = MyBase.Columns("Last_Update")
            Me.columnGarage_Door = MyBase.Columns("Garage_Door")
            Me.columnGarage_Window_South = MyBase.Columns("Garage_Window_South")
            Me.columnGarage_Window_North = MyBase.Columns("Garage_Window_North")
            Me.columnGarage_Outside_Door = MyBase.Columns("Garage_Outside_Door")
            Me.columnGarage_Outside_Door_Lock = MyBase.Columns("Garage_Outside_Door_Lock")
            Me.columnGarage_Inside_Door = MyBase.Columns("Garage_Inside_Door")
            Me.columnGarage_Inside_Door_Lock = MyBase.Columns("Garage_Inside_Door_Lock")
            Me.columnKitchen_Window = MyBase.Columns("Kitchen_Window")
            Me.columnBack_Door = MyBase.Columns("Back_Door")
            Me.columnBack_Door_Lock = MyBase.Columns("Back_Door_Lock")
            Me.columnGreat_Room_Window_South = MyBase.Columns("Great_Room_Window_South")
            Me.columnGreat_Room_Window_North = MyBase.Columns("Great_Room_Window_North")
            Me.columnPlay_Room_Window_South = MyBase.Columns("Play_Room_Window_South")
            Me.columnPlay_Room_window_North = MyBase.Columns("Play_Room_window_North")
            Me.columnFamiy_Room_Window_South = MyBase.Columns("Famiy_Room_Window_South")
            Me.columnFamily_Room_Window_Front_South = MyBase.Columns("Family_Room_Window_Front_South")
            Me.columnFamily_Room_Window_Front_Middle = MyBase.Columns("Family_Room_Window_Front_Middle")
            Me.columnFamily_Room_Window_Front_North = MyBase.Columns("Family_Room_Window_Front_North")
            Me.columnFront_Door = MyBase.Columns("Front_Door")
            Me.columnFront_Door_Lock = MyBase.Columns("Front_Door_Lock")
            Me.columnDining_Room_Window_South = MyBase.Columns("Dining_Room_Window_South")
            Me.columnDining_Room_Window_North = MyBase.Columns("Dining_Room_Window_North")
            Me.columnMaster_Bath_Window = MyBase.Columns("Master_Bath_Window")
            Me.columnMaster_Bedroom_Window_South = MyBase.Columns("Master_Bedroom_Window_South")
            Me.columnMaster_Bedroom_Window_Back_South = MyBase.Columns("Master_Bedroom_Window_Back_South")
            Me.columnMaster_Bedroom_Window_Back_North = MyBase.Columns("Master_Bedroom_Window_Back_North")
            Me.columnSydney_Bedroom_Window = MyBase.Columns("Sydney_Bedroom_Window")
            Me.columnEthan_Bedroom_Window = MyBase.Columns("Ethan_Bedroom_Window")
            Me.columnSpare_Bedroom_Window_North = MyBase.Columns("Spare_Bedroom_Window_North")
            Me.columnSpare_Bedroom_Window_South = MyBase.Columns("Spare_Bedroom_Window_South")
            Me.columnMailbox = MyBase.Columns("Mailbox")
            Me.columnBasement_Door = MyBase.Columns("Basement_Door")
            Me.columnBasement_Door_Lock = MyBase.Columns("Basement_Door_Lock")
            Me.columnBasement_Window_South = MyBase.Columns("Basement_Window_South")
            Me.columnBasement_Window_North = MyBase.Columns("Basement_Window_North")
            Me.columnBasement_Storage_Door = MyBase.Columns("Basement_Storage_Door")
            Me.columnCar_West = MyBase.Columns("Car_West")
            Me.columnCar_East = MyBase.Columns("Car_East")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRow_ID = New Global.System.Data.DataColumn("Row_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRow_ID)
            Me.columnLast_Update = New Global.System.Data.DataColumn("Last_Update", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLast_Update)
            Me.columnGarage_Door = New Global.System.Data.DataColumn("Garage_Door", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarage_Door)
            Me.columnGarage_Window_South = New Global.System.Data.DataColumn("Garage_Window_South", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarage_Window_South)
            Me.columnGarage_Window_North = New Global.System.Data.DataColumn("Garage_Window_North", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarage_Window_North)
            Me.columnGarage_Outside_Door = New Global.System.Data.DataColumn("Garage_Outside_Door", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarage_Outside_Door)
            Me.columnGarage_Outside_Door_Lock = New Global.System.Data.DataColumn("Garage_Outside_Door_Lock", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarage_Outside_Door_Lock)
            Me.columnGarage_Inside_Door = New Global.System.Data.DataColumn("Garage_Inside_Door", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarage_Inside_Door)
            Me.columnGarage_Inside_Door_Lock = New Global.System.Data.DataColumn("Garage_Inside_Door_Lock", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarage_Inside_Door_Lock)
            Me.columnKitchen_Window = New Global.System.Data.DataColumn("Kitchen_Window", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKitchen_Window)
            Me.columnBack_Door = New Global.System.Data.DataColumn("Back_Door", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBack_Door)
            Me.columnBack_Door_Lock = New Global.System.Data.DataColumn("Back_Door_Lock", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBack_Door_Lock)
            Me.columnGreat_Room_Window_South = New Global.System.Data.DataColumn("Great_Room_Window_South", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGreat_Room_Window_South)
            Me.columnGreat_Room_Window_North = New Global.System.Data.DataColumn("Great_Room_Window_North", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGreat_Room_Window_North)
            Me.columnPlay_Room_Window_South = New Global.System.Data.DataColumn("Play_Room_Window_South", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlay_Room_Window_South)
            Me.columnPlay_Room_window_North = New Global.System.Data.DataColumn("Play_Room_window_North", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlay_Room_window_North)
            Me.columnFamiy_Room_Window_South = New Global.System.Data.DataColumn("Famiy_Room_Window_South", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamiy_Room_Window_South)
            Me.columnFamily_Room_Window_Front_South = New Global.System.Data.DataColumn("Family_Room_Window_Front_South", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamily_Room_Window_Front_South)
            Me.columnFamily_Room_Window_Front_Middle = New Global.System.Data.DataColumn("Family_Room_Window_Front_Middle", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamily_Room_Window_Front_Middle)
            Me.columnFamily_Room_Window_Front_North = New Global.System.Data.DataColumn("Family_Room_Window_Front_North", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFamily_Room_Window_Front_North)
            Me.columnFront_Door = New Global.System.Data.DataColumn("Front_Door", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFront_Door)
            Me.columnFront_Door_Lock = New Global.System.Data.DataColumn("Front_Door_Lock", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFront_Door_Lock)
            Me.columnDining_Room_Window_South = New Global.System.Data.DataColumn("Dining_Room_Window_South", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDining_Room_Window_South)
            Me.columnDining_Room_Window_North = New Global.System.Data.DataColumn("Dining_Room_Window_North", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDining_Room_Window_North)
            Me.columnMaster_Bath_Window = New Global.System.Data.DataColumn("Master_Bath_Window", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaster_Bath_Window)
            Me.columnMaster_Bedroom_Window_South = New Global.System.Data.DataColumn("Master_Bedroom_Window_South", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaster_Bedroom_Window_South)
            Me.columnMaster_Bedroom_Window_Back_South = New Global.System.Data.DataColumn("Master_Bedroom_Window_Back_South", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaster_Bedroom_Window_Back_South)
            Me.columnMaster_Bedroom_Window_Back_North = New Global.System.Data.DataColumn("Master_Bedroom_Window_Back_North", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaster_Bedroom_Window_Back_North)
            Me.columnSydney_Bedroom_Window = New Global.System.Data.DataColumn("Sydney_Bedroom_Window", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSydney_Bedroom_Window)
            Me.columnEthan_Bedroom_Window = New Global.System.Data.DataColumn("Ethan_Bedroom_Window", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEthan_Bedroom_Window)
            Me.columnSpare_Bedroom_Window_North = New Global.System.Data.DataColumn("Spare_Bedroom_Window_North", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpare_Bedroom_Window_North)
            Me.columnSpare_Bedroom_Window_South = New Global.System.Data.DataColumn("Spare_Bedroom_Window_South", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpare_Bedroom_Window_South)
            Me.columnMailbox = New Global.System.Data.DataColumn("Mailbox", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMailbox)
            Me.columnBasement_Door = New Global.System.Data.DataColumn("Basement_Door", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasement_Door)
            Me.columnBasement_Door_Lock = New Global.System.Data.DataColumn("Basement_Door_Lock", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasement_Door_Lock)
            Me.columnBasement_Window_South = New Global.System.Data.DataColumn("Basement_Window_South", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasement_Window_South)
            Me.columnBasement_Window_North = New Global.System.Data.DataColumn("Basement_Window_North", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasement_Window_North)
            Me.columnBasement_Storage_Door = New Global.System.Data.DataColumn("Basement_Storage_Door", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasement_Storage_Door)
            Me.columnCar_West = New Global.System.Data.DataColumn("Car_West", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCar_West)
            Me.columnCar_East = New Global.System.Data.DataColumn("Car_East", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCar_East)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLast_Update}, true))
            Me.columnRow_ID.AllowDBNull = false
            Me.columnLast_Update.AllowDBNull = false
            Me.columnLast_Update.Unique = true
            Me.columnGarage_Door.AllowDBNull = false
            Me.columnGarage_Window_South.AllowDBNull = false
            Me.columnGarage_Window_North.AllowDBNull = false
            Me.columnGarage_Outside_Door.AllowDBNull = false
            Me.columnGarage_Outside_Door_Lock.AllowDBNull = false
            Me.columnGarage_Inside_Door.AllowDBNull = false
            Me.columnGarage_Inside_Door_Lock.AllowDBNull = false
            Me.columnKitchen_Window.AllowDBNull = false
            Me.columnBack_Door.AllowDBNull = false
            Me.columnBack_Door_Lock.AllowDBNull = false
            Me.columnGreat_Room_Window_South.AllowDBNull = false
            Me.columnGreat_Room_Window_North.AllowDBNull = false
            Me.columnPlay_Room_Window_South.AllowDBNull = false
            Me.columnPlay_Room_window_North.AllowDBNull = false
            Me.columnFamiy_Room_Window_South.AllowDBNull = false
            Me.columnFamily_Room_Window_Front_South.AllowDBNull = false
            Me.columnFamily_Room_Window_Front_Middle.AllowDBNull = false
            Me.columnFamily_Room_Window_Front_North.AllowDBNull = false
            Me.columnFront_Door.AllowDBNull = false
            Me.columnFront_Door_Lock.AllowDBNull = false
            Me.columnDining_Room_Window_South.AllowDBNull = false
            Me.columnDining_Room_Window_North.AllowDBNull = false
            Me.columnMaster_Bath_Window.AllowDBNull = false
            Me.columnMaster_Bedroom_Window_South.AllowDBNull = false
            Me.columnMaster_Bedroom_Window_Back_South.AllowDBNull = false
            Me.columnMaster_Bedroom_Window_Back_North.AllowDBNull = false
            Me.columnSydney_Bedroom_Window.AllowDBNull = false
            Me.columnEthan_Bedroom_Window.AllowDBNull = false
            Me.columnSpare_Bedroom_Window_North.AllowDBNull = false
            Me.columnSpare_Bedroom_Window_South.AllowDBNull = false
            Me.columnMailbox.AllowDBNull = false
            Me.columnBasement_Door.AllowDBNull = false
            Me.columnBasement_Door_Lock.AllowDBNull = false
            Me.columnBasement_Window_South.AllowDBNull = false
            Me.columnBasement_Window_North.AllowDBNull = false
            Me.columnBasement_Storage_Door.AllowDBNull = false
            Me.columnCar_West.AllowDBNull = false
            Me.columnCar_East.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEvent_Current_StateRow() As Event_Current_StateRow
            Return CType(Me.NewRow,Event_Current_StateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Event_Current_StateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Event_Current_StateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Event_Current_StateRowChangedEvent) Is Nothing) Then
                RaiseEvent Event_Current_StateRowChanged(Me, New Event_Current_StateRowChangeEvent(CType(e.Row,Event_Current_StateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Event_Current_StateRowChangingEvent) Is Nothing) Then
                RaiseEvent Event_Current_StateRowChanging(Me, New Event_Current_StateRowChangeEvent(CType(e.Row,Event_Current_StateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Event_Current_StateRowDeletedEvent) Is Nothing) Then
                RaiseEvent Event_Current_StateRowDeleted(Me, New Event_Current_StateRowChangeEvent(CType(e.Row,Event_Current_StateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Event_Current_StateRowDeletingEvent) Is Nothing) Then
                RaiseEvent Event_Current_StateRowDeleting(Me, New Event_Current_StateRowChangeEvent(CType(e.Row,Event_Current_StateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEvent_Current_StateRow(ByVal row As Event_Current_StateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As WatchdogDataSet = New WatchdogDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Event_Current_StateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Temp_Current_StateDataTable
        Inherits Global.System.Data.TypedTableBase(Of Temp_Current_StateRow)
        
        Private columnLast_Update As Global.System.Data.DataColumn
        
        Private columnMaster_Bedroom As Global.System.Data.DataColumn
        
        Private columnEthan_Bedroom As Global.System.Data.DataColumn
        
        Private columnSydney_Bedroom As Global.System.Data.DataColumn
        
        Private columnPlay_Room As Global.System.Data.DataColumn
        
        Private columnKitchen As Global.System.Data.DataColumn
        
        Private columnLiving_Room As Global.System.Data.DataColumn
        
        Private columnGarage As Global.System.Data.DataColumn
        
        Private columnBasement_Office As Global.System.Data.DataColumn
        
        Private columnGreat_Room As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Temp_Current_State"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Last_UpdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLast_Update
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Master_BedroomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaster_Bedroom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ethan_BedroomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEthan_Bedroom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sydney_BedroomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSydney_Bedroom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Play_RoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlay_Room
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KitchenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKitchen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Living_RoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiving_Room
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GarageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGarage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Basement_OfficeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBasement_Office
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Great_RoomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGreat_Room
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Temp_Current_StateRow
            Get
                Return CType(Me.Rows(index),Temp_Current_StateRow)
            End Get
        End Property
        
        Public Event Temp_Current_StateRowChanging As Temp_Current_StateRowChangeEventHandler
        
        Public Event Temp_Current_StateRowChanged As Temp_Current_StateRowChangeEventHandler
        
        Public Event Temp_Current_StateRowDeleting As Temp_Current_StateRowChangeEventHandler
        
        Public Event Temp_Current_StateRowDeleted As Temp_Current_StateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTemp_Current_StateRow(ByVal row As Temp_Current_StateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTemp_Current_StateRow(ByVal Last_Update As Date, ByVal Master_Bedroom As Integer, ByVal Ethan_Bedroom As Integer, ByVal Sydney_Bedroom As Integer, ByVal Play_Room As Integer, ByVal Kitchen As Integer, ByVal Living_Room As Integer, ByVal Garage As Integer, ByVal Basement_Office As Integer, ByVal Great_Room As Integer) As Temp_Current_StateRow
            Dim rowTemp_Current_StateRow As Temp_Current_StateRow = CType(Me.NewRow,Temp_Current_StateRow)
            Dim columnValuesArray() As Object = New Object() {Last_Update, Master_Bedroom, Ethan_Bedroom, Sydney_Bedroom, Play_Room, Kitchen, Living_Room, Garage, Basement_Office, Great_Room}
            rowTemp_Current_StateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTemp_Current_StateRow)
            Return rowTemp_Current_StateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLast_Update(ByVal Last_Update As Date) As Temp_Current_StateRow
            Return CType(Me.Rows.Find(New Object() {Last_Update}),Temp_Current_StateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Temp_Current_StateDataTable = CType(MyBase.Clone,Temp_Current_StateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Temp_Current_StateDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLast_Update = MyBase.Columns("Last_Update")
            Me.columnMaster_Bedroom = MyBase.Columns("Master_Bedroom")
            Me.columnEthan_Bedroom = MyBase.Columns("Ethan_Bedroom")
            Me.columnSydney_Bedroom = MyBase.Columns("Sydney_Bedroom")
            Me.columnPlay_Room = MyBase.Columns("Play_Room")
            Me.columnKitchen = MyBase.Columns("Kitchen")
            Me.columnLiving_Room = MyBase.Columns("Living_Room")
            Me.columnGarage = MyBase.Columns("Garage")
            Me.columnBasement_Office = MyBase.Columns("Basement_Office")
            Me.columnGreat_Room = MyBase.Columns("Great_Room")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLast_Update = New Global.System.Data.DataColumn("Last_Update", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLast_Update)
            Me.columnMaster_Bedroom = New Global.System.Data.DataColumn("Master_Bedroom", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaster_Bedroom)
            Me.columnEthan_Bedroom = New Global.System.Data.DataColumn("Ethan_Bedroom", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEthan_Bedroom)
            Me.columnSydney_Bedroom = New Global.System.Data.DataColumn("Sydney_Bedroom", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSydney_Bedroom)
            Me.columnPlay_Room = New Global.System.Data.DataColumn("Play_Room", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlay_Room)
            Me.columnKitchen = New Global.System.Data.DataColumn("Kitchen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKitchen)
            Me.columnLiving_Room = New Global.System.Data.DataColumn("Living_Room", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiving_Room)
            Me.columnGarage = New Global.System.Data.DataColumn("Garage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGarage)
            Me.columnBasement_Office = New Global.System.Data.DataColumn("Basement_Office", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBasement_Office)
            Me.columnGreat_Room = New Global.System.Data.DataColumn("Great_Room", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGreat_Room)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLast_Update}, true))
            Me.columnLast_Update.AllowDBNull = false
            Me.columnLast_Update.Unique = true
            Me.columnMaster_Bedroom.AllowDBNull = false
            Me.columnEthan_Bedroom.AllowDBNull = false
            Me.columnSydney_Bedroom.AllowDBNull = false
            Me.columnPlay_Room.AllowDBNull = false
            Me.columnKitchen.AllowDBNull = false
            Me.columnLiving_Room.AllowDBNull = false
            Me.columnGarage.AllowDBNull = false
            Me.columnBasement_Office.AllowDBNull = false
            Me.columnGreat_Room.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTemp_Current_StateRow() As Temp_Current_StateRow
            Return CType(Me.NewRow,Temp_Current_StateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Temp_Current_StateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Temp_Current_StateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Temp_Current_StateRowChangedEvent) Is Nothing) Then
                RaiseEvent Temp_Current_StateRowChanged(Me, New Temp_Current_StateRowChangeEvent(CType(e.Row,Temp_Current_StateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Temp_Current_StateRowChangingEvent) Is Nothing) Then
                RaiseEvent Temp_Current_StateRowChanging(Me, New Temp_Current_StateRowChangeEvent(CType(e.Row,Temp_Current_StateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Temp_Current_StateRowDeletedEvent) Is Nothing) Then
                RaiseEvent Temp_Current_StateRowDeleted(Me, New Temp_Current_StateRowChangeEvent(CType(e.Row,Temp_Current_StateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Temp_Current_StateRowDeletingEvent) Is Nothing) Then
                RaiseEvent Temp_Current_StateRowDeleting(Me, New Temp_Current_StateRowChangeEvent(CType(e.Row,Temp_Current_StateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTemp_Current_StateRow(ByVal row As Temp_Current_StateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As WatchdogDataSet = New WatchdogDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Temp_Current_StateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Event_HistoryDataTable
        Inherits Global.System.Data.TypedTableBase(Of Event_HistoryRow)
        
        Private columnEvent_ID As Global.System.Data.DataColumn
        
        Private columnEvent_Timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Event_History"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Event_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvent_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Event_TimestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvent_Timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Event_HistoryRow
            Get
                Return CType(Me.Rows(index),Event_HistoryRow)
            End Get
        End Property
        
        Public Event Event_HistoryRowChanging As Event_HistoryRowChangeEventHandler
        
        Public Event Event_HistoryRowChanged As Event_HistoryRowChangeEventHandler
        
        Public Event Event_HistoryRowDeleting As Event_HistoryRowChangeEventHandler
        
        Public Event Event_HistoryRowDeleted As Event_HistoryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEvent_HistoryRow(ByVal row As Event_HistoryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEvent_HistoryRow(ByVal Event_ID As String, ByVal Event_Timestamp As Date) As Event_HistoryRow
            Dim rowEvent_HistoryRow As Event_HistoryRow = CType(Me.NewRow,Event_HistoryRow)
            Dim columnValuesArray() As Object = New Object() {Event_ID, Event_Timestamp}
            rowEvent_HistoryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEvent_HistoryRow)
            Return rowEvent_HistoryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Event_HistoryDataTable = CType(MyBase.Clone,Event_HistoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Event_HistoryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEvent_ID = MyBase.Columns("Event_ID")
            Me.columnEvent_Timestamp = MyBase.Columns("Event_Timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEvent_ID = New Global.System.Data.DataColumn("Event_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEvent_ID)
            Me.columnEvent_Timestamp = New Global.System.Data.DataColumn("Event_Timestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEvent_Timestamp)
            Me.columnEvent_ID.AllowDBNull = false
            Me.columnEvent_ID.MaxLength = 4
            Me.columnEvent_Timestamp.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEvent_HistoryRow() As Event_HistoryRow
            Return CType(Me.NewRow,Event_HistoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Event_HistoryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Event_HistoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Event_HistoryRowChangedEvent) Is Nothing) Then
                RaiseEvent Event_HistoryRowChanged(Me, New Event_HistoryRowChangeEvent(CType(e.Row,Event_HistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Event_HistoryRowChangingEvent) Is Nothing) Then
                RaiseEvent Event_HistoryRowChanging(Me, New Event_HistoryRowChangeEvent(CType(e.Row,Event_HistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Event_HistoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent Event_HistoryRowDeleted(Me, New Event_HistoryRowChangeEvent(CType(e.Row,Event_HistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Event_HistoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent Event_HistoryRowDeleting(Me, New Event_HistoryRowChangeEvent(CType(e.Row,Event_HistoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEvent_HistoryRow(ByVal row As Event_HistoryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As WatchdogDataSet = New WatchdogDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Event_HistoryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class X10_ControlDataTable
        Inherits Global.System.Data.TypedTableBase(Of X10_ControlRow)
        
        Private columnLight1_on As Global.System.Data.DataColumn
        
        Private columnLight1_off As Global.System.Data.DataColumn
        
        Private columnLight2_on As Global.System.Data.DataColumn
        
        Private columnLight2_off As Global.System.Data.DataColumn
        
        Private columnLight3_on As Global.System.Data.DataColumn
        
        Private columnLight3_off As Global.System.Data.DataColumn
        
        Private columnTemp_Up_1 As Global.System.Data.DataColumn
        
        Private columnTemp_Down_1 As Global.System.Data.DataColumn
        
        Private columnTemp_Up_3 As Global.System.Data.DataColumn
        
        Private columnTemp_Down_3 As Global.System.Data.DataColumn
        
        Private columnZone1_on As Global.System.Data.DataColumn
        
        Private columnZone1_off As Global.System.Data.DataColumn
        
        Private columnZone2_on As Global.System.Data.DataColumn
        
        Private columnZone2_off As Global.System.Data.DataColumn
        
        Private columnZone3_on As Global.System.Data.DataColumn
        
        Private columnZone3_off As Global.System.Data.DataColumn
        
        Private columnZone4_on As Global.System.Data.DataColumn
        
        Private columnZone4_off As Global.System.Data.DataColumn
        
        Private columnLight4_on As Global.System.Data.DataColumn
        
        Private columnLight4_off As Global.System.Data.DataColumn
        
        Private columnDoorbell As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "X10_Control"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Light1_onColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLight1_on
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Light1_offColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLight1_off
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Light2_onColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLight2_on
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Light2_offColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLight2_off
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Light3_onColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLight3_on
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Light3_offColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLight3_off
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Temp_Up_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemp_Up_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Temp_Down_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemp_Down_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Temp_Up_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemp_Up_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Temp_Down_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemp_Down_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zone1_onColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZone1_on
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zone1_offColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZone1_off
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zone2_onColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZone2_on
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zone2_offColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZone2_off
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zone3_onColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZone3_on
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zone3_offColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZone3_off
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zone4_onColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZone4_on
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zone4_offColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZone4_off
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Light4_onColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLight4_on
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Light4_offColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLight4_off
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DoorbellColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoorbell
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As X10_ControlRow
            Get
                Return CType(Me.Rows(index),X10_ControlRow)
            End Get
        End Property
        
        Public Event X10_ControlRowChanging As X10_ControlRowChangeEventHandler
        
        Public Event X10_ControlRowChanged As X10_ControlRowChangeEventHandler
        
        Public Event X10_ControlRowDeleting As X10_ControlRowChangeEventHandler
        
        Public Event X10_ControlRowDeleted As X10_ControlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddX10_ControlRow(ByVal row As X10_ControlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddX10_ControlRow( _
                    ByVal Light1_on As Integer,  _
                    ByVal Light1_off As Integer,  _
                    ByVal Light2_on As Integer,  _
                    ByVal Light2_off As Integer,  _
                    ByVal Light3_on As Integer,  _
                    ByVal Light3_off As Integer,  _
                    ByVal Temp_Up_1 As Integer,  _
                    ByVal Temp_Down_1 As Integer,  _
                    ByVal Temp_Up_3 As Integer,  _
                    ByVal Temp_Down_3 As Integer,  _
                    ByVal Zone1_on As Integer,  _
                    ByVal Zone1_off As Integer,  _
                    ByVal Zone2_on As Integer,  _
                    ByVal Zone2_off As Integer,  _
                    ByVal Zone3_on As Integer,  _
                    ByVal Zone3_off As Integer,  _
                    ByVal Zone4_on As Integer,  _
                    ByVal Zone4_off As Integer,  _
                    ByVal Light4_on As Integer,  _
                    ByVal Light4_off As Integer,  _
                    ByVal Doorbell As Integer) As X10_ControlRow
            Dim rowX10_ControlRow As X10_ControlRow = CType(Me.NewRow,X10_ControlRow)
            Dim columnValuesArray() As Object = New Object() {Light1_on, Light1_off, Light2_on, Light2_off, Light3_on, Light3_off, Temp_Up_1, Temp_Down_1, Temp_Up_3, Temp_Down_3, Zone1_on, Zone1_off, Zone2_on, Zone2_off, Zone3_on, Zone3_off, Zone4_on, Zone4_off, Light4_on, Light4_off, Doorbell}
            rowX10_ControlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowX10_ControlRow)
            Return rowX10_ControlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As X10_ControlDataTable = CType(MyBase.Clone,X10_ControlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New X10_ControlDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLight1_on = MyBase.Columns("Light1_on")
            Me.columnLight1_off = MyBase.Columns("Light1_off")
            Me.columnLight2_on = MyBase.Columns("Light2_on")
            Me.columnLight2_off = MyBase.Columns("Light2_off")
            Me.columnLight3_on = MyBase.Columns("Light3_on")
            Me.columnLight3_off = MyBase.Columns("Light3_off")
            Me.columnTemp_Up_1 = MyBase.Columns("Temp_Up_1")
            Me.columnTemp_Down_1 = MyBase.Columns("Temp_Down_1")
            Me.columnTemp_Up_3 = MyBase.Columns("Temp_Up_3")
            Me.columnTemp_Down_3 = MyBase.Columns("Temp_Down_3")
            Me.columnZone1_on = MyBase.Columns("Zone1_on")
            Me.columnZone1_off = MyBase.Columns("Zone1_off")
            Me.columnZone2_on = MyBase.Columns("Zone2_on")
            Me.columnZone2_off = MyBase.Columns("Zone2_off")
            Me.columnZone3_on = MyBase.Columns("Zone3_on")
            Me.columnZone3_off = MyBase.Columns("Zone3_off")
            Me.columnZone4_on = MyBase.Columns("Zone4_on")
            Me.columnZone4_off = MyBase.Columns("Zone4_off")
            Me.columnLight4_on = MyBase.Columns("Light4_on")
            Me.columnLight4_off = MyBase.Columns("Light4_off")
            Me.columnDoorbell = MyBase.Columns("Doorbell")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLight1_on = New Global.System.Data.DataColumn("Light1_on", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLight1_on)
            Me.columnLight1_off = New Global.System.Data.DataColumn("Light1_off", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLight1_off)
            Me.columnLight2_on = New Global.System.Data.DataColumn("Light2_on", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLight2_on)
            Me.columnLight2_off = New Global.System.Data.DataColumn("Light2_off", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLight2_off)
            Me.columnLight3_on = New Global.System.Data.DataColumn("Light3_on", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLight3_on)
            Me.columnLight3_off = New Global.System.Data.DataColumn("Light3_off", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLight3_off)
            Me.columnTemp_Up_1 = New Global.System.Data.DataColumn("Temp_Up_1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemp_Up_1)
            Me.columnTemp_Down_1 = New Global.System.Data.DataColumn("Temp_Down_1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemp_Down_1)
            Me.columnTemp_Up_3 = New Global.System.Data.DataColumn("Temp_Up_3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemp_Up_3)
            Me.columnTemp_Down_3 = New Global.System.Data.DataColumn("Temp_Down_3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemp_Down_3)
            Me.columnZone1_on = New Global.System.Data.DataColumn("Zone1_on", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZone1_on)
            Me.columnZone1_off = New Global.System.Data.DataColumn("Zone1_off", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZone1_off)
            Me.columnZone2_on = New Global.System.Data.DataColumn("Zone2_on", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZone2_on)
            Me.columnZone2_off = New Global.System.Data.DataColumn("Zone2_off", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZone2_off)
            Me.columnZone3_on = New Global.System.Data.DataColumn("Zone3_on", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZone3_on)
            Me.columnZone3_off = New Global.System.Data.DataColumn("Zone3_off", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZone3_off)
            Me.columnZone4_on = New Global.System.Data.DataColumn("Zone4_on", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZone4_on)
            Me.columnZone4_off = New Global.System.Data.DataColumn("Zone4_off", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZone4_off)
            Me.columnLight4_on = New Global.System.Data.DataColumn("Light4_on", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLight4_on)
            Me.columnLight4_off = New Global.System.Data.DataColumn("Light4_off", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLight4_off)
            Me.columnDoorbell = New Global.System.Data.DataColumn("Doorbell", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoorbell)
            Me.columnLight1_on.AllowDBNull = false
            Me.columnLight1_off.AllowDBNull = false
            Me.columnLight2_on.AllowDBNull = false
            Me.columnLight2_off.AllowDBNull = false
            Me.columnLight3_on.AllowDBNull = false
            Me.columnLight3_off.AllowDBNull = false
            Me.columnTemp_Up_1.AllowDBNull = false
            Me.columnTemp_Down_1.AllowDBNull = false
            Me.columnTemp_Up_3.AllowDBNull = false
            Me.columnTemp_Down_3.AllowDBNull = false
            Me.columnZone1_on.AllowDBNull = false
            Me.columnZone1_off.AllowDBNull = false
            Me.columnZone2_on.AllowDBNull = false
            Me.columnZone2_off.AllowDBNull = false
            Me.columnZone3_on.AllowDBNull = false
            Me.columnZone3_off.AllowDBNull = false
            Me.columnZone4_on.AllowDBNull = false
            Me.columnZone4_off.AllowDBNull = false
            Me.columnLight4_on.AllowDBNull = false
            Me.columnLight4_off.AllowDBNull = false
            Me.columnDoorbell.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewX10_ControlRow() As X10_ControlRow
            Return CType(Me.NewRow,X10_ControlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New X10_ControlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(X10_ControlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.X10_ControlRowChangedEvent) Is Nothing) Then
                RaiseEvent X10_ControlRowChanged(Me, New X10_ControlRowChangeEvent(CType(e.Row,X10_ControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.X10_ControlRowChangingEvent) Is Nothing) Then
                RaiseEvent X10_ControlRowChanging(Me, New X10_ControlRowChangeEvent(CType(e.Row,X10_ControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.X10_ControlRowDeletedEvent) Is Nothing) Then
                RaiseEvent X10_ControlRowDeleted(Me, New X10_ControlRowChangeEvent(CType(e.Row,X10_ControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.X10_ControlRowDeletingEvent) Is Nothing) Then
                RaiseEvent X10_ControlRowDeleting(Me, New X10_ControlRowChangeEvent(CType(e.Row,X10_ControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveX10_ControlRow(ByVal row As X10_ControlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As WatchdogDataSet = New WatchdogDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "X10_ControlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Event_Current_StateRow
        Inherits Global.System.Data.DataRow
        
        Private tableEvent_Current_State As Event_Current_StateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEvent_Current_State = CType(Me.Table,Event_Current_StateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Row_ID() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Row_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Row_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Last_Update() As Date
            Get
                Return CType(Me(Me.tableEvent_Current_State.Last_UpdateColumn),Date)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Last_UpdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Garage_Door() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Garage_DoorColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Garage_DoorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Garage_Window_South() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Garage_Window_SouthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Garage_Window_SouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Garage_Window_North() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Garage_Window_NorthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Garage_Window_NorthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Garage_Outside_Door() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Garage_Outside_DoorColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Garage_Outside_DoorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Garage_Outside_Door_Lock() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Garage_Outside_Door_LockColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Garage_Outside_Door_LockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Garage_Inside_Door() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Garage_Inside_DoorColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Garage_Inside_DoorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Garage_Inside_Door_Lock() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Garage_Inside_Door_LockColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Garage_Inside_Door_LockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kitchen_Window() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Kitchen_WindowColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Kitchen_WindowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Back_Door() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Back_DoorColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Back_DoorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Back_Door_Lock() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Back_Door_LockColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Back_Door_LockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Great_Room_Window_South() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Great_Room_Window_SouthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Great_Room_Window_SouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Great_Room_Window_North() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Great_Room_Window_NorthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Great_Room_Window_NorthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Play_Room_Window_South() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Play_Room_Window_SouthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Play_Room_Window_SouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Play_Room_window_North() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Play_Room_window_NorthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Play_Room_window_NorthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Famiy_Room_Window_South() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Famiy_Room_Window_SouthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Famiy_Room_Window_SouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Family_Room_Window_Front_South() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Family_Room_Window_Front_SouthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Family_Room_Window_Front_SouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Family_Room_Window_Front_Middle() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Family_Room_Window_Front_MiddleColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Family_Room_Window_Front_MiddleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Family_Room_Window_Front_North() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Family_Room_Window_Front_NorthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Family_Room_Window_Front_NorthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Front_Door() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Front_DoorColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Front_DoorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Front_Door_Lock() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Front_Door_LockColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Front_Door_LockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dining_Room_Window_South() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Dining_Room_Window_SouthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Dining_Room_Window_SouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dining_Room_Window_North() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Dining_Room_Window_NorthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Dining_Room_Window_NorthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Master_Bath_Window() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Master_Bath_WindowColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Master_Bath_WindowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Master_Bedroom_Window_South() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Master_Bedroom_Window_SouthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Master_Bedroom_Window_SouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Master_Bedroom_Window_Back_South() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Master_Bedroom_Window_Back_SouthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Master_Bedroom_Window_Back_SouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Master_Bedroom_Window_Back_North() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Master_Bedroom_Window_Back_NorthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Master_Bedroom_Window_Back_NorthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sydney_Bedroom_Window() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Sydney_Bedroom_WindowColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Sydney_Bedroom_WindowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ethan_Bedroom_Window() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Ethan_Bedroom_WindowColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Ethan_Bedroom_WindowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Spare_Bedroom_Window_North() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Spare_Bedroom_Window_NorthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Spare_Bedroom_Window_NorthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Spare_Bedroom_Window_South() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Spare_Bedroom_Window_SouthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Spare_Bedroom_Window_SouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mailbox() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.MailboxColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.MailboxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Basement_Door() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Basement_DoorColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Basement_DoorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Basement_Door_Lock() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Basement_Door_LockColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Basement_Door_LockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Basement_Window_South() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Basement_Window_SouthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Basement_Window_SouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Basement_Window_North() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Basement_Window_NorthColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Basement_Window_NorthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Basement_Storage_Door() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Basement_Storage_DoorColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Basement_Storage_DoorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Car_West() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Car_WestColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Car_WestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Car_East() As Integer
            Get
                Return CType(Me(Me.tableEvent_Current_State.Car_EastColumn),Integer)
            End Get
            Set
                Me(Me.tableEvent_Current_State.Car_EastColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Temp_Current_StateRow
        Inherits Global.System.Data.DataRow
        
        Private tableTemp_Current_State As Temp_Current_StateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemp_Current_State = CType(Me.Table,Temp_Current_StateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Last_Update() As Date
            Get
                Return CType(Me(Me.tableTemp_Current_State.Last_UpdateColumn),Date)
            End Get
            Set
                Me(Me.tableTemp_Current_State.Last_UpdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Master_Bedroom() As Integer
            Get
                Return CType(Me(Me.tableTemp_Current_State.Master_BedroomColumn),Integer)
            End Get
            Set
                Me(Me.tableTemp_Current_State.Master_BedroomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ethan_Bedroom() As Integer
            Get
                Return CType(Me(Me.tableTemp_Current_State.Ethan_BedroomColumn),Integer)
            End Get
            Set
                Me(Me.tableTemp_Current_State.Ethan_BedroomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sydney_Bedroom() As Integer
            Get
                Return CType(Me(Me.tableTemp_Current_State.Sydney_BedroomColumn),Integer)
            End Get
            Set
                Me(Me.tableTemp_Current_State.Sydney_BedroomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Play_Room() As Integer
            Get
                Return CType(Me(Me.tableTemp_Current_State.Play_RoomColumn),Integer)
            End Get
            Set
                Me(Me.tableTemp_Current_State.Play_RoomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kitchen() As Integer
            Get
                Return CType(Me(Me.tableTemp_Current_State.KitchenColumn),Integer)
            End Get
            Set
                Me(Me.tableTemp_Current_State.KitchenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Living_Room() As Integer
            Get
                Return CType(Me(Me.tableTemp_Current_State.Living_RoomColumn),Integer)
            End Get
            Set
                Me(Me.tableTemp_Current_State.Living_RoomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Garage() As Integer
            Get
                Return CType(Me(Me.tableTemp_Current_State.GarageColumn),Integer)
            End Get
            Set
                Me(Me.tableTemp_Current_State.GarageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Basement_Office() As Integer
            Get
                Return CType(Me(Me.tableTemp_Current_State.Basement_OfficeColumn),Integer)
            End Get
            Set
                Me(Me.tableTemp_Current_State.Basement_OfficeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Great_Room() As Integer
            Get
                Return CType(Me(Me.tableTemp_Current_State.Great_RoomColumn),Integer)
            End Get
            Set
                Me(Me.tableTemp_Current_State.Great_RoomColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Event_HistoryRow
        Inherits Global.System.Data.DataRow
        
        Private tableEvent_History As Event_HistoryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEvent_History = CType(Me.Table,Event_HistoryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Event_ID() As String
            Get
                Return CType(Me(Me.tableEvent_History.Event_IDColumn),String)
            End Get
            Set
                Me(Me.tableEvent_History.Event_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Event_Timestamp() As Date
            Get
                Return CType(Me(Me.tableEvent_History.Event_TimestampColumn),Date)
            End Get
            Set
                Me(Me.tableEvent_History.Event_TimestampColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class X10_ControlRow
        Inherits Global.System.Data.DataRow
        
        Private tableX10_Control As X10_ControlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableX10_Control = CType(Me.Table,X10_ControlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Light1_on() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Light1_onColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Light1_onColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Light1_off() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Light1_offColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Light1_offColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Light2_on() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Light2_onColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Light2_onColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Light2_off() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Light2_offColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Light2_offColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Light3_on() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Light3_onColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Light3_onColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Light3_off() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Light3_offColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Light3_offColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Temp_Up_1() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Temp_Up_1Column),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Temp_Up_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Temp_Down_1() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Temp_Down_1Column),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Temp_Down_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Temp_Up_3() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Temp_Up_3Column),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Temp_Up_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Temp_Down_3() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Temp_Down_3Column),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Temp_Down_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zone1_on() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Zone1_onColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Zone1_onColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zone1_off() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Zone1_offColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Zone1_offColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zone2_on() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Zone2_onColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Zone2_onColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zone2_off() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Zone2_offColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Zone2_offColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zone3_on() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Zone3_onColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Zone3_onColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zone3_off() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Zone3_offColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Zone3_offColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zone4_on() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Zone4_onColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Zone4_onColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zone4_off() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Zone4_offColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Zone4_offColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Light4_on() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Light4_onColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Light4_onColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Light4_off() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.Light4_offColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.Light4_offColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doorbell() As Integer
            Get
                Return CType(Me(Me.tableX10_Control.DoorbellColumn),Integer)
            End Get
            Set
                Me(Me.tableX10_Control.DoorbellColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Event_Current_StateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Event_Current_StateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Event_Current_StateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Event_Current_StateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Temp_Current_StateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Temp_Current_StateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Temp_Current_StateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Temp_Current_StateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Event_HistoryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Event_HistoryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Event_HistoryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Event_HistoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class X10_ControlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As X10_ControlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As X10_ControlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As X10_ControlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace WatchdogDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Event_Current_StateTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Event_Current_State"
            tableMapping.ColumnMappings.Add("Row_ID", "Row_ID")
            tableMapping.ColumnMappings.Add("Last_Update", "Last_Update")
            tableMapping.ColumnMappings.Add("Garage_Door", "Garage_Door")
            tableMapping.ColumnMappings.Add("Garage_Window_South", "Garage_Window_South")
            tableMapping.ColumnMappings.Add("Garage_Window_North", "Garage_Window_North")
            tableMapping.ColumnMappings.Add("Garage_Outside_Door", "Garage_Outside_Door")
            tableMapping.ColumnMappings.Add("Garage_Outside_Door_Lock", "Garage_Outside_Door_Lock")
            tableMapping.ColumnMappings.Add("Garage_Inside_Door", "Garage_Inside_Door")
            tableMapping.ColumnMappings.Add("Garage_Inside_Door_Lock", "Garage_Inside_Door_Lock")
            tableMapping.ColumnMappings.Add("Kitchen_Window", "Kitchen_Window")
            tableMapping.ColumnMappings.Add("Back_Door", "Back_Door")
            tableMapping.ColumnMappings.Add("Back_Door_Lock", "Back_Door_Lock")
            tableMapping.ColumnMappings.Add("Great_Room_Window_South", "Great_Room_Window_South")
            tableMapping.ColumnMappings.Add("Great_Room_Window_North", "Great_Room_Window_North")
            tableMapping.ColumnMappings.Add("Play_Room_Window_South", "Play_Room_Window_South")
            tableMapping.ColumnMappings.Add("Play_Room_window_North", "Play_Room_window_North")
            tableMapping.ColumnMappings.Add("Famiy_Room_Window_South", "Famiy_Room_Window_South")
            tableMapping.ColumnMappings.Add("Family_Room_Window_Front_South", "Family_Room_Window_Front_South")
            tableMapping.ColumnMappings.Add("Family_Room_Window_Front_Middle", "Family_Room_Window_Front_Middle")
            tableMapping.ColumnMappings.Add("Family_Room_Window_Front_North", "Family_Room_Window_Front_North")
            tableMapping.ColumnMappings.Add("Front_Door", "Front_Door")
            tableMapping.ColumnMappings.Add("Front_Door_Lock", "Front_Door_Lock")
            tableMapping.ColumnMappings.Add("Dining_Room_Window_South", "Dining_Room_Window_South")
            tableMapping.ColumnMappings.Add("Dining_Room_Window_North", "Dining_Room_Window_North")
            tableMapping.ColumnMappings.Add("Master_Bath_Window", "Master_Bath_Window")
            tableMapping.ColumnMappings.Add("Master_Bedroom_Window_South", "Master_Bedroom_Window_South")
            tableMapping.ColumnMappings.Add("Master_Bedroom_Window_Back_South", "Master_Bedroom_Window_Back_South")
            tableMapping.ColumnMappings.Add("Master_Bedroom_Window_Back_North", "Master_Bedroom_Window_Back_North")
            tableMapping.ColumnMappings.Add("Sydney_Bedroom_Window", "Sydney_Bedroom_Window")
            tableMapping.ColumnMappings.Add("Ethan_Bedroom_Window", "Ethan_Bedroom_Window")
            tableMapping.ColumnMappings.Add("Spare_Bedroom_Window_North", "Spare_Bedroom_Window_North")
            tableMapping.ColumnMappings.Add("Spare_Bedroom_Window_South", "Spare_Bedroom_Window_South")
            tableMapping.ColumnMappings.Add("Mailbox", "Mailbox")
            tableMapping.ColumnMappings.Add("Basement_Door", "Basement_Door")
            tableMapping.ColumnMappings.Add("Basement_Door_Lock", "Basement_Door_Lock")
            tableMapping.ColumnMappings.Add("Basement_Window_South", "Basement_Window_South")
            tableMapping.ColumnMappings.Add("Basement_Window_North", "Basement_Window_North")
            tableMapping.ColumnMappings.Add("Basement_Storage_Door", "Basement_Storage_Door")
            tableMapping.ColumnMappings.Add("Car_West", "Car_West")
            tableMapping.ColumnMappings.Add("Car_East", "Car_East")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Event_Current_State] WHERE (([Row_ID] = @Original_Row_ID) AND ([Gara"& _ 
                "ge_Door] = @Original_Garage_Door) AND ([Garage_Window_South] = @Original_Garage_"& _ 
                "Window_South) AND ([Garage_Window_North] = @Original_Garage_Window_North) AND (["& _ 
                "Garage_Outside_Door] = @Original_Garage_Outside_Door) AND ([Garage_Outside_Door_"& _ 
                "Lock] = @Original_Garage_Outside_Door_Lock) AND ([Garage_Inside_Door] = @Origina"& _ 
                "l_Garage_Inside_Door) AND ([Garage_Inside_Door_Lock] = @Original_Garage_Inside_D"& _ 
                "oor_Lock) AND ([Kitchen_Window] = @Original_Kitchen_Window) AND ([Back_Door] = @"& _ 
                "Original_Back_Door) AND ([Back_Door_Lock] = @Original_Back_Door_Lock) AND ([Grea"& _ 
                "t_Room_Window_South] = @Original_Great_Room_Window_South) AND ([Great_Room_Windo"& _ 
                "w_North] = @Original_Great_Room_Window_North) AND ([Play_Room_Window_South] = @O"& _ 
                "riginal_Play_Room_Window_South) AND ([Play_Room_window_North] = @Original_Play_R"& _ 
                "oom_window_North) AND ([Famiy_Room_Window_South] = @Original_Famiy_Room_Window_S"& _ 
                "outh) AND ([Family_Room_Window_Front_South] = @Original_Family_Room_Window_Front"& _ 
                "_South) AND ([Family_Room_Window_Front_Middle] = @Original_Family_Room_Window_Fr"& _ 
                "ont_Middle) AND ([Family_Room_Window_Front_North] = @Original_Family_Room_Window"& _ 
                "_Front_North) AND ([Front_Door] = @Original_Front_Door) AND ([Front_Door_Lock] ="& _ 
                " @Original_Front_Door_Lock) AND ([Dining_Room_Window_South] = @Original_Dining_R"& _ 
                "oom_Window_South) AND ([Dining_Room_Window_North] = @Original_Dining_Room_Window"& _ 
                "_North) AND ([Master_Bath_Window] = @Original_Master_Bath_Window) AND ([Master_B"& _ 
                "edroom_Window_South] = @Original_Master_Bedroom_Window_South) AND ([Master_Bedro"& _ 
                "om_Window_Back_South] = @Original_Master_Bedroom_Window_Back_South) AND ([Master"& _ 
                "_Bedroom_Window_Back_North] = @Original_Master_Bedroom_Window_Back_North) AND (["& _ 
                "Sydney_Bedroom_Window] = @Original_Sydney_Bedroom_Window) AND ([Ethan_Bedroom_Wi"& _ 
                "ndow] = @Original_Ethan_Bedroom_Window) AND ([Spare_Bedroom_Window_North] = @Ori"& _ 
                "ginal_Spare_Bedroom_Window_North) AND ([Spare_Bedroom_Window_South] = @Original_"& _ 
                "Spare_Bedroom_Window_South) AND ([Mailbox] = @Original_Mailbox) AND ([Basement_D"& _ 
                "oor] = @Original_Basement_Door) AND ([Basement_Door_Lock] = @Original_Basement_D"& _ 
                "oor_Lock) AND ([Basement_Window_South] = @Original_Basement_Window_South) AND (["& _ 
                "Basement_Window_North] = @Original_Basement_Window_North) AND ([Basement_Storage"& _ 
                "_Door] = @Original_Basement_Storage_Door) AND ([Car_West] = @Original_Car_West) "& _ 
                "AND ([Car_East] = @Original_Car_East) AND ([Last_Update] = @Original_Last_Update"& _ 
                "))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Row_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Row_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Outside_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Outside_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Outside_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Outside_Door_Lock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Inside_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Inside_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Inside_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Inside_Door_Lock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kitchen_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kitchen_Window", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Back_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Back_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Back_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Back_Door_Lock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Great_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Great_Room_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Great_Room_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Great_Room_Window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Play_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Play_Room_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Play_Room_window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Play_Room_window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famiy_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famiy_Room_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Family_Room_Window_Front_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Family_Room_Window_Front_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Family_Room_Window_Front_Middle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Family_Room_Window_Front_Middle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Family_Room_Window_Front_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Family_Room_Window_Front_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Front_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Front_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Front_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Front_Door_Lock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dining_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dining_Room_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dining_Room_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dining_Room_Window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Master_Bath_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bath_Window", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Master_Bedroom_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Master_Bedroom_Window_Back_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom_Window_Back_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Master_Bedroom_Window_Back_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom_Window_Back_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Sydney_Bedroom_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sydney_Bedroom_Window", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ethan_Bedroom_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ethan_Bedroom_Window", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Spare_Bedroom_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Spare_Bedroom_Window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Spare_Bedroom_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Spare_Bedroom_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Mailbox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mailbox", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Door_Lock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Storage_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Storage_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Car_West", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Car_West", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Car_East", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Car_East", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Last_Update", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Last_Update", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Event_Current_State] SET [Row_ID] = @Row_ID, [Garage_Door] = @Garage_Door"& _ 
                ", [Garage_Window_South] = @Garage_Window_South, [Garage_Window_North] = @Garage_"& _ 
                "Window_North, [Garage_Outside_Door] = @Garage_Outside_Door, [Garage_Outside_Door"& _ 
                "_Lock] = @Garage_Outside_Door_Lock, [Garage_Inside_Door] = @Garage_Inside_Door, "& _ 
                "[Garage_Inside_Door_Lock] = @Garage_Inside_Door_Lock, [Kitchen_Window] = @Kitche"& _ 
                "n_Window, [Back_Door] = @Back_Door, [Back_Door_Lock] = @Back_Door_Lock, [Great_R"& _ 
                "oom_Window_South] = @Great_Room_Window_South, [Great_Room_Window_North] = @Great"& _ 
                "_Room_Window_North, [Play_Room_Window_South] = @Play_Room_Window_South, [Play_Ro"& _ 
                "om_window_North] = @Play_Room_window_North, [Famiy_Room_Window_South] = @Famiy_R"& _ 
                "oom_Window_South, [Family_Room_Window_Front_South] = @Family_Room_Window_Front_S"& _ 
                "outh, [Family_Room_Window_Front_Middle] = @Family_Room_Window_Front_Middle, [Fam"& _ 
                "ily_Room_Window_Front_North] = @Family_Room_Window_Front_North, [Front_Door] = @"& _ 
                "Front_Door, [Front_Door_Lock] = @Front_Door_Lock, [Dining_Room_Window_South] = @"& _ 
                "Dining_Room_Window_South, [Dining_Room_Window_North] = @Dining_Room_Window_North"& _ 
                ", [Master_Bath_Window] = @Master_Bath_Window, [Master_Bedroom_Window_South] = @M"& _ 
                "aster_Bedroom_Window_South, [Master_Bedroom_Window_Back_South] = @Master_Bedroom"& _ 
                "_Window_Back_South, [Master_Bedroom_Window_Back_North] = @Master_Bedroom_Window_"& _ 
                "Back_North, [Sydney_Bedroom_Window] = @Sydney_Bedroom_Window, [Ethan_Bedroom_Win"& _ 
                "dow] = @Ethan_Bedroom_Window, [Spare_Bedroom_Window_North] = @Spare_Bedroom_Wind"& _ 
                "ow_North, [Spare_Bedroom_Window_South] = @Spare_Bedroom_Window_South, [Mailbox] "& _ 
                "= @Mailbox, [Basement_Door] = @Basement_Door, [Basement_Door_Lock] = @Basement_D"& _ 
                "oor_Lock, [Basement_Window_South] = @Basement_Window_South, [Basement_Window_Nor"& _ 
                "th] = @Basement_Window_North, [Basement_Storage_Door] = @Basement_Storage_Door, "& _ 
                "[Car_West] = @Car_West, [Car_East] = @Car_East, [Last_Update] = @Last_Update WHE"& _ 
                "RE (([Row_ID] = @Original_Row_ID) AND ([Garage_Door] = @Original_Garage_Door) AN"& _ 
                "D ([Garage_Window_South] = @Original_Garage_Window_South) AND ([Garage_Window_No"& _ 
                "rth] = @Original_Garage_Window_North) AND ([Garage_Outside_Door] = @Original_Gar"& _ 
                "age_Outside_Door) AND ([Garage_Outside_Door_Lock] = @Original_Garage_Outside_Doo"& _ 
                "r_Lock) AND ([Garage_Inside_Door] = @Original_Garage_Inside_Door) AND ([Garage_I"& _ 
                "nside_Door_Lock] = @Original_Garage_Inside_Door_Lock) AND ([Kitchen_Window] = @O"& _ 
                "riginal_Kitchen_Window) AND ([Back_Door] = @Original_Back_Door) AND ([Back_Door_"& _ 
                "Lock] = @Original_Back_Door_Lock) AND ([Great_Room_Window_South] = @Original_Gre"& _ 
                "at_Room_Window_South) AND ([Great_Room_Window_North] = @Original_Great_Room_Wind"& _ 
                "ow_North) AND ([Play_Room_Window_South] = @Original_Play_Room_Window_South) AND "& _ 
                "([Play_Room_window_North] = @Original_Play_Room_window_North) AND ([Famiy_Room_W"& _ 
                "indow_South] = @Original_Famiy_Room_Window_South) AND ([Family_Room_Window_Front"& _ 
                "_South] = @Original_Family_Room_Window_Front_South) AND ([Family_Room_Window_Fro"& _ 
                "nt_Middle] = @Original_Family_Room_Window_Front_Middle) AND ([Family_Room_Window"& _ 
                "_Front_North] = @Original_Family_Room_Window_Front_North) AND ([Front_Door] = @O"& _ 
                "riginal_Front_Door) AND ([Front_Door_Lock] = @Original_Front_Door_Lock) AND ([Di"& _ 
                "ning_Room_Window_South] = @Original_Dining_Room_Window_South) AND ([Dining_Room_"& _ 
                "Window_North] = @Original_Dining_Room_Window_North) AND ([Master_Bath_Window] = "& _ 
                "@Original_Master_Bath_Window) AND ([Master_Bedroom_Window_South] = @Original_Mas"& _ 
                "ter_Bedroom_Window_South) AND ([Master_Bedroom_Window_Back_South] = @Original_Ma"& _ 
                "ster_Bedroom_Window_Back_South) AND ([Master_Bedroom_Window_Back_North] = @Origi"& _ 
                "nal_Master_Bedroom_Window_Back_North) AND ([Sydney_Bedroom_Window] = @Original_S"& _ 
                "ydney_Bedroom_Window) AND ([Ethan_Bedroom_Window] = @Original_Ethan_Bedroom_Wind"& _ 
                "ow) AND ([Spare_Bedroom_Window_North] = @Original_Spare_Bedroom_Window_North) AN"& _ 
                "D ([Spare_Bedroom_Window_South] = @Original_Spare_Bedroom_Window_South) AND ([Ma"& _ 
                "ilbox] = @Original_Mailbox) AND ([Basement_Door] = @Original_Basement_Door) AND "& _ 
                "([Basement_Door_Lock] = @Original_Basement_Door_Lock) AND ([Basement_Window_Sout"& _ 
                "h] = @Original_Basement_Window_South) AND ([Basement_Window_North] = @Original_B"& _ 
                "asement_Window_North) AND ([Basement_Storage_Door] = @Original_Basement_Storage_"& _ 
                "Door) AND ([Car_West] = @Original_Car_West) AND ([Car_East] = @Original_Car_East"& _ 
                ") AND ([Last_Update] = @Original_Last_Update));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Row_ID, Garage_Door, Gar"& _ 
                "age_Window_South, Garage_Window_North, Garage_Outside_Door, Garage_Outside_Door_"& _ 
                "Lock, Garage_Inside_Door, Garage_Inside_Door_Lock, Kitchen_Window, Back_Door, Ba"& _ 
                "ck_Door_Lock, Great_Room_Window_South, Great_Room_Window_North, Play_Room_Window"& _ 
                "_South, Play_Room_window_North, Famiy_Room_Window_South, Family_Room_Window_Fron"& _ 
                "t_South, Family_Room_Window_Front_Middle, Family_Room_Window_Front_North, Front_"& _ 
                "Door, Front_Door_Lock, Dining_Room_Window_South, Dining_Room_Window_North, Maste"& _ 
                "r_Bath_Window, Master_Bedroom_Window_South, Master_Bedroom_Window_Back_South, Ma"& _ 
                "ster_Bedroom_Window_Back_North, Sydney_Bedroom_Window, Ethan_Bedroom_Window, Spa"& _ 
                "re_Bedroom_Window_North, Spare_Bedroom_Window_South, Mailbox, Basement_Door, Bas"& _ 
                "ement_Door_Lock, Basement_Window_South, Basement_Window_North, Basement_Storage_"& _ 
                "Door, Car_West, Car_East, Last_Update FROM Event_Current_State WHERE (Last_Updat"& _ 
                "e = @Last_Update)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Row_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Row_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Garage_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Door", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Garage_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Window_South", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Garage_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Window_North", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Garage_Outside_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Outside_Door", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Garage_Outside_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Outside_Door_Lock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Garage_Inside_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Inside_Door", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Garage_Inside_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Inside_Door_Lock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kitchen_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kitchen_Window", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Back_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Back_Door", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Back_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Back_Door_Lock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Great_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Great_Room_Window_South", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Great_Room_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Great_Room_Window_North", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Play_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Play_Room_Window_South", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Play_Room_window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Play_Room_window_North", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Famiy_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famiy_Room_Window_South", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Family_Room_Window_Front_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Family_Room_Window_Front_South", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Family_Room_Window_Front_Middle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Family_Room_Window_Front_Middle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Family_Room_Window_Front_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Family_Room_Window_Front_North", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Front_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Front_Door", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Front_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Front_Door_Lock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dining_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dining_Room_Window_South", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dining_Room_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dining_Room_Window_North", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Master_Bath_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bath_Window", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Master_Bedroom_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom_Window_South", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Master_Bedroom_Window_Back_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom_Window_Back_South", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Master_Bedroom_Window_Back_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom_Window_Back_North", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sydney_Bedroom_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sydney_Bedroom_Window", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ethan_Bedroom_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ethan_Bedroom_Window", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Spare_Bedroom_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Spare_Bedroom_Window_North", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Spare_Bedroom_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Spare_Bedroom_Window_South", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mailbox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mailbox", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Basement_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Door", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Basement_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Door_Lock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Basement_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Window_South", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Basement_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Window_North", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Basement_Storage_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Storage_Door", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Car_West", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Car_West", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Car_East", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Car_East", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Last_Update", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Last_Update", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Row_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Row_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Outside_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Outside_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Outside_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Outside_Door_Lock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Inside_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Inside_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage_Inside_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage_Inside_Door_Lock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kitchen_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kitchen_Window", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Back_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Back_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Back_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Back_Door_Lock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Great_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Great_Room_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Great_Room_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Great_Room_Window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Play_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Play_Room_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Play_Room_window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Play_Room_window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Famiy_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Famiy_Room_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Family_Room_Window_Front_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Family_Room_Window_Front_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Family_Room_Window_Front_Middle", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Family_Room_Window_Front_Middle", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Family_Room_Window_Front_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Family_Room_Window_Front_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Front_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Front_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Front_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Front_Door_Lock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dining_Room_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dining_Room_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dining_Room_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dining_Room_Window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Master_Bath_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bath_Window", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Master_Bedroom_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Master_Bedroom_Window_Back_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom_Window_Back_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Master_Bedroom_Window_Back_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom_Window_Back_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Sydney_Bedroom_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sydney_Bedroom_Window", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ethan_Bedroom_Window", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ethan_Bedroom_Window", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Spare_Bedroom_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Spare_Bedroom_Window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Spare_Bedroom_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Spare_Bedroom_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Mailbox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mailbox", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Door_Lock", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Door_Lock", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Window_South", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Window_South", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Window_North", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Window_North", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Storage_Door", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Storage_Door", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Car_West", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Car_West", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Car_East", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Car_East", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Last_Update", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Last_Update", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.WatchdogConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Row_ID, Garage_Door, Garage_Window_South, Garage_Window_North, Garage_Outs"& _ 
                "ide_Door, Garage_Outside_Door_Lock, Garage_Inside_Door, Garage_Inside_Door_Lock,"& _ 
                " Kitchen_Window, Back_Door, Back_Door_Lock, Great_Room_Window_South, Great_Room_"& _ 
                "Window_North, Play_Room_Window_South, Play_Room_window_North, Famiy_Room_Window_"& _ 
                "South, Family_Room_Window_Front_South, Family_Room_Window_Front_Middle, Family_R"& _ 
                "oom_Window_Front_North, Front_Door, Front_Door_Lock, Dining_Room_Window_South, D"& _ 
                "ining_Room_Window_North, Master_Bath_Window, Master_Bedroom_Window_South, Master"& _ 
                "_Bedroom_Window_Back_South, Master_Bedroom_Window_Back_North, Sydney_Bedroom_Win"& _ 
                "dow, Ethan_Bedroom_Window, Spare_Bedroom_Window_North, Spare_Bedroom_Window_Sout"& _ 
                "h, Mailbox, Basement_Door, Basement_Door_Lock, Basement_Window_South, Basement_W"& _ 
                "indow_North, Basement_Storage_Door, Car_West, Car_East, Last_Update FROM Event_C"& _ 
                "urrent_State WHERE (Row_ID = 1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WatchdogDataSet.Event_Current_StateDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WatchdogDataSet.Event_Current_StateDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WatchdogDataSet.Event_Current_StateDataTable = New WatchdogDataSet.Event_Current_StateDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WatchdogDataSet.Event_Current_StateDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WatchdogDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Event_Current_State")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Temp_Current_StateTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Temp_Current_State"
            tableMapping.ColumnMappings.Add("Last_Update", "Last_Update")
            tableMapping.ColumnMappings.Add("Master_Bedroom", "Master_Bedroom")
            tableMapping.ColumnMappings.Add("Ethan_Bedroom", "Ethan_Bedroom")
            tableMapping.ColumnMappings.Add("Sydney_Bedroom", "Sydney_Bedroom")
            tableMapping.ColumnMappings.Add("Play_Room", "Play_Room")
            tableMapping.ColumnMappings.Add("Kitchen", "Kitchen")
            tableMapping.ColumnMappings.Add("Living_Room", "Living_Room")
            tableMapping.ColumnMappings.Add("Garage", "Garage")
            tableMapping.ColumnMappings.Add("Basement_Office", "Basement_Office")
            tableMapping.ColumnMappings.Add("Great_Room", "Great_Room")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Temp_Current_State] WHERE (([Last_Update] = @Original_Last_Upd"& _ 
                "ate) AND ([Master_Bedroom] = @Original_Master_Bedroom) AND ([Ethan_Bedroom] = @O"& _ 
                "riginal_Ethan_Bedroom) AND ([Sydney_Bedroom] = @Original_Sydney_Bedroom) AND ([P"& _ 
                "lay_Room] = @Original_Play_Room) AND ([Kitchen] = @Original_Kitchen) AND ([Livin"& _ 
                "g_Room] = @Original_Living_Room) AND ([Garage] = @Original_Garage) AND ([Basemen"& _ 
                "t_Office] = @Original_Basement_Office) AND ([Great_Room] = @Original_Great_Room)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Last_Update", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Last_Update", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Master_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ethan_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ethan_Bedroom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Sydney_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sydney_Bedroom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Play_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Play_Room", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kitchen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kitchen", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Living_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Living_Room", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Office", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Office", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Great_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Great_Room", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Temp_Current_State] ([Last_Update], [Master_Bedroom], [Ethan_B"& _ 
                "edroom], [Sydney_Bedroom], [Play_Room], [Kitchen], [Living_Room], [Garage], [Bas"& _ 
                "ement_Office], [Great_Room]) VALUES (@Last_Update, @Master_Bedroom, @Ethan_Bedro"& _ 
                "om, @Sydney_Bedroom, @Play_Room, @Kitchen, @Living_Room, @Garage, @Basement_Offi"& _ 
                "ce, @Great_Room);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Last_Update, Master_Bedroom, Ethan_Bedroom, Sydney_Bed"& _ 
                "room, Play_Room, Kitchen, Living_Room, Garage, Basement_Office, Great_Room FROM "& _ 
                "Temp_Current_State WHERE (Last_Update = @Last_Update)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Last_Update", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Last_Update", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Master_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ethan_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ethan_Bedroom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sydney_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sydney_Bedroom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Play_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Play_Room", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kitchen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kitchen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Living_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Living_Room", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Garage", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Basement_Office", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Office", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Great_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Great_Room", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Temp_Current_State] SET [Last_Update] = @Last_Update, [Master_Bedro"& _ 
                "om] = @Master_Bedroom, [Ethan_Bedroom] = @Ethan_Bedroom, [Sydney_Bedroom] = @Syd"& _ 
                "ney_Bedroom, [Play_Room] = @Play_Room, [Kitchen] = @Kitchen, [Living_Room] = @Li"& _ 
                "ving_Room, [Garage] = @Garage, [Basement_Office] = @Basement_Office, [Great_Room"& _ 
                "] = @Great_Room WHERE (([Last_Update] = @Original_Last_Update) AND ([Master_Bedr"& _ 
                "oom] = @Original_Master_Bedroom) AND ([Ethan_Bedroom] = @Original_Ethan_Bedroom)"& _ 
                " AND ([Sydney_Bedroom] = @Original_Sydney_Bedroom) AND ([Play_Room] = @Original_"& _ 
                "Play_Room) AND ([Kitchen] = @Original_Kitchen) AND ([Living_Room] = @Original_Li"& _ 
                "ving_Room) AND ([Garage] = @Original_Garage) AND ([Basement_Office] = @Original_"& _ 
                "Basement_Office) AND ([Great_Room] = @Original_Great_Room));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Last_Update"& _ 
                ", Master_Bedroom, Ethan_Bedroom, Sydney_Bedroom, Play_Room, Kitchen, Living_Room"& _ 
                ", Garage, Basement_Office, Great_Room FROM Temp_Current_State WHERE (Last_Update"& _ 
                " = @Last_Update)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Last_Update", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Last_Update", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Master_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ethan_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ethan_Bedroom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sydney_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sydney_Bedroom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Play_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Play_Room", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Kitchen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kitchen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Living_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Living_Room", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Garage", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Basement_Office", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Office", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Great_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Great_Room", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Last_Update", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Last_Update", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Master_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Bedroom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ethan_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ethan_Bedroom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Sydney_Bedroom", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sydney_Bedroom", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Play_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Play_Room", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Kitchen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Kitchen", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Living_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Living_Room", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Garage", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Garage", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Basement_Office", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Basement_Office", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Great_Room", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Great_Room", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.WatchdogConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Last_Update, Master_Bedroom, Ethan_Bedroom, Sydney_Bedroom, Play_Room, Kit"& _ 
                "chen, Living_Room, Garage, Basement_Office, Great_Room FROM dbo.Temp_Current_Sta"& _ 
                "te"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WatchdogDataSet.Temp_Current_StateDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WatchdogDataSet.Temp_Current_StateDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WatchdogDataSet.Temp_Current_StateDataTable = New WatchdogDataSet.Temp_Current_StateDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WatchdogDataSet.Temp_Current_StateDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WatchdogDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Temp_Current_State")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Last_Update As Date, ByVal Original_Master_Bedroom As Integer, ByVal Original_Ethan_Bedroom As Integer, ByVal Original_Sydney_Bedroom As Integer, ByVal Original_Play_Room As Integer, ByVal Original_Kitchen As Integer, ByVal Original_Living_Room As Integer, ByVal Original_Garage As Integer, ByVal Original_Basement_Office As Integer, ByVal Original_Great_Room As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Last_Update,Date)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Master_Bedroom,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Ethan_Bedroom,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Sydney_Bedroom,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Play_Room,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Kitchen,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Living_Room,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Garage,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Basement_Office,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Great_Room,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Last_Update As Date, ByVal Master_Bedroom As Integer, ByVal Ethan_Bedroom As Integer, ByVal Sydney_Bedroom As Integer, ByVal Play_Room As Integer, ByVal Kitchen As Integer, ByVal Living_Room As Integer, ByVal Garage As Integer, ByVal Basement_Office As Integer, ByVal Great_Room As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Last_Update,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Master_Bedroom,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Ethan_Bedroom,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Sydney_Bedroom,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Play_Room,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Kitchen,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Living_Room,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Garage,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Basement_Office,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(Great_Room,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Last_Update As Date,  _
                    ByVal Master_Bedroom As Integer,  _
                    ByVal Ethan_Bedroom As Integer,  _
                    ByVal Sydney_Bedroom As Integer,  _
                    ByVal Play_Room As Integer,  _
                    ByVal Kitchen As Integer,  _
                    ByVal Living_Room As Integer,  _
                    ByVal Garage As Integer,  _
                    ByVal Basement_Office As Integer,  _
                    ByVal Great_Room As Integer,  _
                    ByVal Original_Last_Update As Date,  _
                    ByVal Original_Master_Bedroom As Integer,  _
                    ByVal Original_Ethan_Bedroom As Integer,  _
                    ByVal Original_Sydney_Bedroom As Integer,  _
                    ByVal Original_Play_Room As Integer,  _
                    ByVal Original_Kitchen As Integer,  _
                    ByVal Original_Living_Room As Integer,  _
                    ByVal Original_Garage As Integer,  _
                    ByVal Original_Basement_Office As Integer,  _
                    ByVal Original_Great_Room As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Last_Update,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Master_Bedroom,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Ethan_Bedroom,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Sydney_Bedroom,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Play_Room,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Kitchen,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Living_Room,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Garage,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Basement_Office,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Great_Room,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Last_Update,Date)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Master_Bedroom,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Ethan_Bedroom,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Sydney_Bedroom,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Play_Room,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Kitchen,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Living_Room,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Garage,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Basement_Office,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Great_Room,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Master_Bedroom As Integer,  _
                    ByVal Ethan_Bedroom As Integer,  _
                    ByVal Sydney_Bedroom As Integer,  _
                    ByVal Play_Room As Integer,  _
                    ByVal Kitchen As Integer,  _
                    ByVal Living_Room As Integer,  _
                    ByVal Garage As Integer,  _
                    ByVal Basement_Office As Integer,  _
                    ByVal Great_Room As Integer,  _
                    ByVal Original_Last_Update As Date,  _
                    ByVal Original_Master_Bedroom As Integer,  _
                    ByVal Original_Ethan_Bedroom As Integer,  _
                    ByVal Original_Sydney_Bedroom As Integer,  _
                    ByVal Original_Play_Room As Integer,  _
                    ByVal Original_Kitchen As Integer,  _
                    ByVal Original_Living_Room As Integer,  _
                    ByVal Original_Garage As Integer,  _
                    ByVal Original_Basement_Office As Integer,  _
                    ByVal Original_Great_Room As Integer) As Integer
            Return Me.Update(Original_Last_Update, Master_Bedroom, Ethan_Bedroom, Sydney_Bedroom, Play_Room, Kitchen, Living_Room, Garage, Basement_Office, Great_Room, Original_Last_Update, Original_Master_Bedroom, Original_Ethan_Bedroom, Original_Sydney_Bedroom, Original_Play_Room, Original_Kitchen, Original_Living_Room, Original_Garage, Original_Basement_Office, Original_Great_Room)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Event_HistoryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Event_History"
            tableMapping.ColumnMappings.Add("Event_ID", "Event_ID")
            tableMapping.ColumnMappings.Add("Event_Timestamp", "Event_Timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Event_History] ([Event_ID], [Event_Timestamp]) VALUES (@Event_"& _ 
                "ID, @Event_Timestamp)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Event_ID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Event_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Event_Timestamp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Event_Timestamp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.WatchdogConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Event_ID, Event_Timestamp FROM dbo.Event_History"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [dbo].[Event_History] ([Event_ID], [Event_Timestamp]) VALUES (@Event_"& _ 
                "ID, @Event_Timestamp)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Event_ID", Global.System.Data.SqlDbType.NChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Event_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Event_Timestamp", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Event_Timestamp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WatchdogDataSet.Event_HistoryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WatchdogDataSet.Event_HistoryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WatchdogDataSet.Event_HistoryDataTable = New WatchdogDataSet.Event_HistoryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WatchdogDataSet.Event_HistoryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WatchdogDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Event_History")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Event_ID As String, ByVal Event_Timestamp As Date) As Integer
            If (Event_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Event_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Event_ID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Event_Timestamp,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery(ByVal Event_ID As String, ByVal Event_Timestamp As Date) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (Event_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Event_ID")
            Else
                command.Parameters(0).Value = CType(Event_ID,String)
            End If
            command.Parameters(1).Value = CType(Event_Timestamp,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class X10_ControlTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "X10_Control"
            tableMapping.ColumnMappings.Add("Light1_on", "Light1_on")
            tableMapping.ColumnMappings.Add("Light1_off", "Light1_off")
            tableMapping.ColumnMappings.Add("Light2_on", "Light2_on")
            tableMapping.ColumnMappings.Add("Light2_off", "Light2_off")
            tableMapping.ColumnMappings.Add("Light3_on", "Light3_on")
            tableMapping.ColumnMappings.Add("Light3_off", "Light3_off")
            tableMapping.ColumnMappings.Add("Temp_Up_1", "Temp_Up_1")
            tableMapping.ColumnMappings.Add("Temp_Down_1", "Temp_Down_1")
            tableMapping.ColumnMappings.Add("Temp_Up_3", "Temp_Up_3")
            tableMapping.ColumnMappings.Add("Temp_Down_3", "Temp_Down_3")
            tableMapping.ColumnMappings.Add("Zone1_on", "Zone1_on")
            tableMapping.ColumnMappings.Add("Zone1_off", "Zone1_off")
            tableMapping.ColumnMappings.Add("Zone2_on", "Zone2_on")
            tableMapping.ColumnMappings.Add("Zone2_off", "Zone2_off")
            tableMapping.ColumnMappings.Add("Zone3_on", "Zone3_on")
            tableMapping.ColumnMappings.Add("Zone3_off", "Zone3_off")
            tableMapping.ColumnMappings.Add("Zone4_on", "Zone4_on")
            tableMapping.ColumnMappings.Add("Zone4_off", "Zone4_off")
            tableMapping.ColumnMappings.Add("Light4_on", "Light4_on")
            tableMapping.ColumnMappings.Add("Light4_off", "Light4_off")
            tableMapping.ColumnMappings.Add("Doorbell", "Doorbell")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[X10_Control] ([Light1_on], [Light1_off], [Light2_on], [Light2_"& _ 
                "off], [Light3_on], [Light3_off], [Light4_on], [Light4_off], [Temp_Up_1], [Temp_D"& _ 
                "own_1], [Temp_Up_3], [Temp_Down_3], [Zone1_on], [Zone1_off], [Zone2_on], [Zone2_"& _ 
                "off], [Zone3_on], [Zone3_off], [Zone4_on], [Zone4_off], [Doorbell]) VALUES (@Lig"& _ 
                "ht1_on, @Light1_off, @Light2_on, @Light2_off, @Light3_on, @Light3_off, @Light4_o"& _ 
                "n, @Light4_off, @Temp_Up_1, @Temp_Down_1, @Temp_Up_3, @Temp_Down_3, @Zone1_on, @"& _ 
                "Zone1_off, @Zone2_on, @Zone2_off, @Zone3_on, @Zone3_off, @Zone4_on, @Zone4_off, "& _ 
                "@Doorbell)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Light1_on", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Light1_on", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Light1_off", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Light1_off", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Light2_on", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Light2_on", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Light2_off", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Light2_off", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Light3_on", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Light3_on", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Light3_off", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Light3_off", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Light4_on", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Light4_on", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Light4_off", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Light4_off", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Temp_Up_1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Temp_Up_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Temp_Down_1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Temp_Down_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Temp_Up_3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Temp_Up_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Temp_Down_3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Temp_Down_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zone1_on", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zone1_on", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zone1_off", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zone1_off", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zone2_on", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zone2_on", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zone2_off", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zone2_off", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zone3_on", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zone3_on", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zone3_off", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zone3_off", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zone4_on", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zone4_on", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Zone4_off", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Zone4_off", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Doorbell", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Doorbell", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.WindowsApplication1.My.MySettings.Default.WatchdogConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Light1_on, Light1_off, Light2_on, Light2_off, Light3_on, Light3_off, Light"& _ 
                "4_on, Light4_off, Temp_Up_1, Temp_Down_1, Temp_Up_3, Temp_Down_3, Zone1_on, Zone"& _ 
                "1_off, Zone2_on, Zone2_off, Zone3_on, Zone3_off, Zone4_on, Zone4_off, Doorbell F"& _ 
                "ROM dbo.X10_Control"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE X10_Control"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"set Light1_off = 1"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE       X10_Control"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Light1_on = 1"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE       X10_Control"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Light3_off = 1"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "UPDATE       X10_Control"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Light3_on = 1"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "UPDATE       X10_Control"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Light4_off = 1"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "UPDATE       X10_Control"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Light4_on = 1"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "UPDATE X10_Control"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Set Temp_Down_1 = 1"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "UPDATE X10_Control"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Set Temp_Up_1 = 1"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WatchdogDataSet.X10_ControlDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WatchdogDataSet.X10_ControlDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WatchdogDataSet.X10_ControlDataTable = New WatchdogDataSet.X10_ControlDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WatchdogDataSet.X10_ControlDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WatchdogDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "X10_Control")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function Light1_off() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function Light1_On() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function Light3_off() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function Light3_On() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function Light4_off() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function Light4_On() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function TempDown1() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function TempUp1() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(8)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _event_Current_StateTableAdapter As Event_Current_StateTableAdapter
        
        Private _temp_Current_StateTableAdapter As Temp_Current_StateTableAdapter
        
        Private _event_HistoryTableAdapter As Event_HistoryTableAdapter
        
        Private _x10_ControlTableAdapter As X10_ControlTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Event_Current_StateTableAdapter() As Event_Current_StateTableAdapter
            Get
                Return Me._event_Current_StateTableAdapter
            End Get
            Set
                Me._event_Current_StateTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Temp_Current_StateTableAdapter() As Temp_Current_StateTableAdapter
            Get
                Return Me._temp_Current_StateTableAdapter
            End Get
            Set
                Me._temp_Current_StateTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Event_HistoryTableAdapter() As Event_HistoryTableAdapter
            Get
                Return Me._event_HistoryTableAdapter
            End Get
            Set
                Me._event_HistoryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property X10_ControlTableAdapter() As X10_ControlTableAdapter
            Get
                Return Me._x10_ControlTableAdapter
            End Get
            Set
                Me._x10_ControlTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._event_Current_StateTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._event_Current_StateTableAdapter.Connection) Is Nothing)) Then
                    Return Me._event_Current_StateTableAdapter.Connection
                End If
                If ((Not (Me._temp_Current_StateTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._temp_Current_StateTableAdapter.Connection) Is Nothing)) Then
                    Return Me._temp_Current_StateTableAdapter.Connection
                End If
                If ((Not (Me._event_HistoryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._event_HistoryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._event_HistoryTableAdapter.Connection
                End If
                If ((Not (Me._x10_ControlTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._x10_ControlTableAdapter.Connection) Is Nothing)) Then
                    Return Me._x10_ControlTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._event_Current_StateTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._temp_Current_StateTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._event_HistoryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._x10_ControlTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As WatchdogDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._event_HistoryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Event_History.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._event_HistoryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._x10_ControlTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.X10_Control.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._x10_ControlTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._event_Current_StateTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Event_Current_State.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._event_Current_StateTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._temp_Current_StateTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Temp_Current_State.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._temp_Current_StateTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As WatchdogDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._event_HistoryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Event_History.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._event_HistoryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._x10_ControlTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.X10_Control.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._x10_ControlTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._event_Current_StateTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Event_Current_State.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._event_Current_StateTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._temp_Current_StateTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Temp_Current_State.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._temp_Current_StateTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As WatchdogDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._temp_Current_StateTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Temp_Current_State.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._temp_Current_StateTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._event_Current_StateTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Event_Current_State.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._event_Current_StateTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._x10_ControlTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.X10_Control.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._x10_ControlTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._event_HistoryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Event_History.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._event_HistoryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As WatchdogDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._event_Current_StateTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._event_Current_StateTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._temp_Current_StateTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._temp_Current_StateTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._event_HistoryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._event_HistoryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._x10_ControlTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._x10_ControlTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._event_Current_StateTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._event_Current_StateTableAdapter, Me._event_Current_StateTableAdapter.Connection)
                    Me._event_Current_StateTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._event_Current_StateTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._event_Current_StateTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._event_Current_StateTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._event_Current_StateTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._temp_Current_StateTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._temp_Current_StateTableAdapter, Me._temp_Current_StateTableAdapter.Connection)
                    Me._temp_Current_StateTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._temp_Current_StateTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._temp_Current_StateTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._temp_Current_StateTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._temp_Current_StateTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._event_HistoryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._event_HistoryTableAdapter, Me._event_HistoryTableAdapter.Connection)
                    Me._event_HistoryTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._event_HistoryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._event_HistoryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._event_HistoryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._event_HistoryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._x10_ControlTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._x10_ControlTableAdapter, Me._x10_ControlTableAdapter.Connection)
                    Me._x10_ControlTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._x10_ControlTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._x10_ControlTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._x10_ControlTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._x10_ControlTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._event_Current_StateTableAdapter) Is Nothing) Then
                    Me._event_Current_StateTableAdapter.Connection = CType(revertConnections(Me._event_Current_StateTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._event_Current_StateTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._temp_Current_StateTableAdapter) Is Nothing) Then
                    Me._temp_Current_StateTableAdapter.Connection = CType(revertConnections(Me._temp_Current_StateTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._temp_Current_StateTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._event_HistoryTableAdapter) Is Nothing) Then
                    Me._event_HistoryTableAdapter.Connection = CType(revertConnections(Me._event_HistoryTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._event_HistoryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._x10_ControlTableAdapter) Is Nothing) Then
                    Me._x10_ControlTableAdapter.Connection = CType(revertConnections(Me._x10_ControlTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._x10_ControlTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
